
*****************  是什么 *******************
instanceof是javascript一个运算符， 作用是判断一个实例是否属于某种类型。


*****************  怎么用  *******************

class Foo{}

const foo = new Foo();

console.log( foo instanceof Foo );
console.log( foo instanceof Object );




*****************  优点  *******************


*****************  缺点  *******************

（1）注意以下语句的执行结果：

Object instanceof Object;         // true
Function instanceof Function;     // true

Number instanceof Number;   // false
String instanceof String;         // false

1.********************************************
问：怎么判断一个变量的数据类型？
答：typeof 和 instanceof;


2.********************************************

问：typeof 和 instanceof的区别。
答：typeof 用于判断变量的数据类型。 但是 typeof 一个引用类型都会返回"object";
比如： 
    typeof new Array()  // object

注意： typeof null === "object"  // true

instanceof 用来判断一个实例是否属于某种类型。


3.********************************************
问：为什么 typeof null === "object"。
答： 这是javascript中的一个bug。
javascript 第一个版值以32位保存。
在低位中1-3位保存数据类型。
其中定义 000 为对象类型。而null是个机器码空指针（32个0）。


4.********************************************
问： instanceof 的缺点
答： 当页面存在iframe时， iframe内外部的window是不同的。
    内部数组实例  instanceof 外部数组原型 结果是 false;
    外部数组实例  instanceof 内部部数组原型 结果是 false;
    其它数据类型类似。
    如index.html中代码。

5.********************************************
问： 更加稳妥的变量类型检测方法?
答： Object.prototype.toString.call()


6.********************************************  
问：instanceof 的原理?  A instanceof B

答：查找B的原型是否存在于A实例的原型链上。


7.********************************************
问： 原生模拟实现 instanceof
答:  如intanceof.js

